<FPS><HTML> 
<added custome video player>

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="FPS.css" />
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link href="http://vjs.zencdn.net/4.12/video-js.css" rel="stylesheet">
    <script src="http://vjs.zencdn.net/4.12/video.js"></script>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r67/three.min.js"></script>

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <title></title>

</head>

<body>
    <script>//back button
        function goBack() {
            window.history.back();
    </script>
    <!--effect Starts-->
    <!-- threejs.org canvas lines example -->

    <script type="text/javascript">
        var mouseX = 0,
            mouseY = 0,
            windowHalfX = window.innerWidth / 2,
            windowHalfY = window.innerHeight / 2,
            SEPARATION = 300,
            AMOUNTX = 10,
            AMOUNTY = 10,
            camera,
            scene,
            renderer;

        init();
        animate();

        function init() {

            var container,
                separation = 100,
                amountX = 40,
                amountY = 40,
                particle;

            container = document.createElement('div');
            container.classList.add('myCanvas');
            document.body.appendChild(container);

            scene = new THREE.Scene();

            renderer = new THREE.CanvasRenderer({ alpha: true }); // gradient; this can be swapped for WebGLRenderer
            renderer.setSize(window.innerWidth, window.innerHeight);
            container.appendChild(renderer.domElement);

            camera = new THREE.PerspectiveCamera(
                75,
                window.innerWidth / window.innerHeight,
                1,
                10000
            );
            camera.position.z = 100;

            // particles
            var PI2 = Math.PI * 2;
            var material = new THREE.SpriteCanvasMaterial({
                color: 0x9f9da0, //color
                program: function (context) {
                    context.beginPath();
                    context.arc(0, 0, 0.5, 0, PI2, true);
                    context.fill();
                }
            });

            var geometry = new THREE.Geometry();

            for (var i = 0; i < 100; i++) {
                particle = new THREE.Sprite(material);
                particle.position.x = Math.random() * 2 - 1;
                particle.position.y = Math.random() * 2 - 1;
                particle.position.z = Math.random() * 2 - 1;
                particle.position.normalize();
                particle.position.multiplyScalar(Math.random() * 10 + 450);
                particle.scale.x = particle.scale.y = 10;
                scene.add(particle);
                geometry.vertices.push(particle.position);
            }

            // lines
            var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({ color: 0x807e82, opacity: 0.5 }));
            scene.add(line);

            // mousey
            document.addEventListener('mousemove', onDocumentMouseMove, false);
            document.addEventListener('touchstart', onDocumentTouchStart, false);
            document.addEventListener('touchmove', onDocumentTouchMove, false);

            window.addEventListener('resize', onWindowResize, false);

        } // end init();

        function onWindowResize() {

            windowHalfX = window.innerWidth / 2;
            windowHalfY = window.innerHeight / 2;

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);

        }

        function onDocumentMouseMove(event) {

            mouseX = event.clientX - windowHalfX;
            mouseY = event.clientY - windowHalfY;

        }

        function onDocumentTouchStart(event) {

            if (event.touches.length > 1) {

                event.preventDefault();

                mouseX = event.touches[0].pageX - windowHalfX;
                mouseY = event.touches[0].pageY - windowHalfY;

            }
        }

        function onDocumentTouchMove(event) {

            if (event.touches.length == 1) {

                event.preventDefault();

                mouseX = event.touches[0].pageX - windowHalfX;
                mouseY = event.touches[0].pageY - windowHalfY;

            }
        }

        function animate() {

            requestAnimationFrame(animate);
            render();

        }

        function render() {

            camera.position.x += (mouseX - camera.position.x) * .05;
            camera.position.y += (- mouseY + 200 - camera.position.y) * .05;
            camera.lookAt(scene.position);

            renderer.render(scene, camera);

        }
    </script>
    <!--effect ends-->
   
    <div class="row">
        <div class="col-md-5">
            <div class="sub-main">
                <input type="button" value="<<" onclick="history.back()" style="font-size:10px;margin: 10px; border-radius: 10px;" /></input>
            </div>
            <br>
            <br>
            <br>
            <br>
            <br>
            <br>
            <div class="responsive-video">
                <video id="MY_VIDEO_1" class="video-js vjs-default-skin" controls
                       preload="auto" width="479" height="294" data-setup="{}">
                    <source src="https://addpipe.com/sample_vid/short.mp4" type='video/mp4'>
                    <source src="https://addpipe.com/sample_vid/short.mp4" type='video/webm'>
                </video>
            </div>
        </div>
        <div class="col-md-7">
            <div class="container-fluid1">
                <div class="Heading">
                    <h1><center><b>FPS</b></center></h1>
                </div>
                <div class="Phara">
                    <p>1. Copy the 'app-release.apk' file in the internal storage of the device and install the app.
                    <p><u>2. Provide the permissions**</u>
                    <p>3. Run<u>'calculate fps.exe'</u> to start the application in desktop.
                    <p>4. Launch the installed android application and the overlay will start displaying the FPS value.The overlay button can be dragged as per your convenience.
                    <p>
                        5. For closing the android application ,either run <b>'close_service.exe'</b> or press and hold the overlay button for 5 seconds  or more.
                        <br>
                        <h1><center><b>For Android below 6</b></center></h1>
                    <p>
                        1.After installing the application,go to the application manager and provide the permission for Screen overlay from permission manager by checking the 'Display pop-out window' or equivalent specific to that device.
                        <br>
                        <br>
                        <h1><center><b>For Android 6</b></center></h1>
                    <p>
                        So ,the app can be launched after granting both the permissions.
                        <br>
                        <h1><center><b>For Android above 6</b></center></h1>
                    <p>1. Go to the developer<b> options -> Monitoring -> GPU rendering profile -> In adb shell dumpsys gfxinfo</b>
                    <p>2. After installing the application,the app will automatically ask for storage and overlay permissions.
                    <p>3. So ,the app can be launched after granting both the permissions.

                </div>
            </div>
        </div>
    </div>

</body>
</html>

=======================================================================================================================================

@import url(https://fonts.googleapis.com/css?family=Open+Sans);
body {
    font-family: 'Open Sans', 'sans-serif';
    background-image: url(http://benague.ca/files/pw_pattern.png);
    background-color: #000000;

    /* SVG fallback for IE 9 (could be data URI, or could use filter) */
    background-image: url(fallback-gradient.svg);
    /* Safari 4, Chrome 1-9, iOS 3.2-4.3, Android 2.1-3.0 */
    background-image: -webkit-gradient(linear, left top, right top, from(#000000), to(#9c27b0));
    /* Safari 5.1, iOS 5.0-6.1, Chrome 10-25, Android 4.0-4.3 */
    background-image: -webkit-linear-gradient(left, #000000, #9c27b0);
    /* Firefox 3.6 - 15 */
    background-image: -moz-linear-gradient(left, #000000, #9c27b0);
    /* Opera 11.1 - 12 */
    background-image: -o-linear-gradient(left, #000000, #9c27b0);
    /* Opera 15+, Chrome 25+, IE 10+, Firefox 16+, Safari 6.1+, iOS 7+, Android 4.4+ */
    background-image: linear-gradient(to right, #000000, #9c27b0);
    margin: 1000px;
    position: relative;
    overflow-x: auto;
    overflow-y: auto;
}


.myCanvas {
    position: absolute;
    width: 100%;
    height: 100%;
}
.vjs-default-skin {
    color: #cccccc;
}
    .vjs-default-skin .vjs-control-bar {
        font-size: 70%
    }

.responsive-video iframe {
    position: absolute;
    top: 5px;
    left: 13px;
    width: 100%;
    height: 100%;
}

.col-md-7 {
    color: #ffffff;
    margin-top: 1%;

   
}

col-md-5 {
    margin-top: 12%;
    padding-bottom: 1000px;
}

.row {
    padding-bottom: 100px;
}

.Phara {
    font-weight: 600;
    font-size: large;
    color: #ffffff;
}

/*Back Button*/
#buttons {
    padding-top: 50px;
    text-align: center;
}

/* start da css for da buttons */

======================================================================



